#ifndef TOKENS
#define TOKENS

typedef enum{
  TOKEN_EOF,
  //TOKEN_KEYWORD,
  TOKEN_KEYWORD_AS,
  TOKEN_KEYWORD_BREAK,
  TOKEN_KEYWORD_CASE,
  TOKEN_KEYWORD_CATCH,
  TOKEN_KEYWORD_CLASS,
  TOKEN_KEYWORD_CONST,
  TOKEN_KEYWORD_CONTINUE,
  TOKEN_KEYWORD_DEFAULT,
  TOKEN_KEYWORD_DELTE,
  TOKEN_KEYWORD_DO,
  TOKEN_KEYWORD_ELSE,
  TOKEN_KEYWORD_EXTENDS,
  TOKEN_KEYWORD_FINALLY,
  TOKEN_KEYWORD_FOR,
  TOKEN_KEYWORD_FUNCTION,
  TOKEN_KEYWORD_IF,
  TOKEN_KEYWORD_IMPLEMENTS,
  TOKEN_KEYWORD_IMPORT,
  TOKEN_KEYWORD_IN,
  TOKEN_KEYWORD_INSTANCEOF,
  TOKEN_KEYWORD_INTERFACE,
  TOKEN_KEYWORD_INTERNAL,
  TOKEN_KEYWORD_IS,
  TOKEN_KEYWORD_NATIVE,
  TOKEN_KEYWORD_NEW,
  TOKEN_KEYWORD_PACKAGE,
  TOKEN_KEYWORD_PRIVATE,
  TOKEN_KEYWORD_PROTECTED,
  TOKEN_KEYWORD_PUBLIC,
  TOKEN_KEYWORD_RETURN,
  TOKEN_KEYWORD_SUPER,
  TOKEN_KEYWORD_SWITCH,
  TOKEN_KEYWORD_THIS,
  TOKEN_KEYWORD_THROW,
  TOKEN_KEYWORD_TO,
  TOKEN_KEYWORD_TRY,
  TOKEN_KEYWORD_TYPEOF,
  TOKEN_KEYWORD_USE,
  TOKEN_KEYWORD_VAR,
  TOKEN_KEYWORD_VOID,
  TOKEN_KEYWORD_WHILE,
  TOKEN_KEYWORD_WITH,
  //"syntatic" ones
  TOKEN_KEYWORD_EACH,
  TOKEN_KEYWORD_GET,
  TOKEN_KEYWORD_SET,
  TOKEN_KEYWORD_NAMESPACE,
  TOKEN_KEYWORD_INCLUDE,
  TOKEN_KEYWORD_DYNAMIC,
  TOKEN_KEYWORD_FINAL,
  TOKEN_KEYWORD_OVERRIDE,
  TOKEN_KEYWORD_STATIC,
  //NUMBERS
  TOKEN_INTEAGER,
  TOKEN_FLOAT,
  //STRINGS
  TOKEN_STRING_LITERAL,
  //COMMENTS
  TOKEN_COMMENT_SINGLE,
  TOKEN_COMMENT_MULTI,
  //varibles, functions etc.
  TOKEN_ID,
  //OPERATORS
  //TODO: add rest of the operators bitwise etc.
  TOKEN_ADD,
  TOKEN_SUBTRACT,
  TOKEN_MULTIPLY,
  TOKEN_DIVIDE,
  TOKEN_ASSIGN,
  TOKEN_INCREMENT,
  TOKEN_DECREMENT,
  TOKEN_EQ,
  //"BRACKETS""
  TOKEN_OPEN_PARANTHESIS,//()
  TOKEN_CLOSE_PARANTHESIS,
  TOKEN_OPEN_BRACE, //{}
  TOKEN_CLOSE_BRACE,
  TOKEN_OPEN_BRACEKT,//[]
  TOKEN_CLOSE_BRACKET,
  TOKEN_SEMICOLON,
  TOKEN_PERIOD,
  TOKEN_COLON,
  TOKEN_COMMA,
  //BOOLS
  TOKEN_BOOL_TRUE,
  TOKEN_BOOL_FALSE,
  //ECMA THINGS
  TOKEN_NULL,
  TOKEN_UNDEFINDED,
  //INVALID TOKEN
  TOKEN_INVALID
} token_t;

#endif